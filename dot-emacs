;(load "active-buffers.el")


(define-key global-map "\C-h" 'delete-backward-char)
(define-key global-map "\C-j" 'scroll-down)
(define-key global-map "\C-o" 'scroll-down)
(setq backup-inhibited t)

(setq load-path (cons (expand-file-name "~/bin/emacs") load-path))
(setq load-path (cons (expand-file-name "~/bin/emacs/haskell-mode") load-path))
(load "view-window.el")
;(load "haskell-mode.el")
(setq exec-path (cons (expand-file-name "~/Library/Haskell/bin") exec-path))


(define-prefix-command 'ctl-Q-keymap)
(global-set-key (kbd "C-q") 'ctl-Q-keymap)
(define-key ctl-Q-keymap (kbd "\C-d") 'view-window-mode)
;(define-key ctl-Q-keymap (kbd "\C-e") 'eval-last-sexp)
(define-key ctl-Q-keymap (kbd "\C-e") 'next-error)
(define-key ctl-Q-keymap (kbd "\C-n") 'view-window-next-buffer)
(define-key ctl-Q-keymap (kbd "\C-p") 'view-window-prev-buffer)
(define-key ctl-Q-keymap (kbd "\C-w") 'whitespace-mode)



;(require 'package)
;(add-to-list 'package-archives
;             '("marmalade" . "http://marmalade-repo.org/packages/"))
;((package-initialize)


(setq erlang-root-dir "/usr/local/bin")
(setq exec-path (cons "/usr/local/bin" exec-path))


;(require 'erlang-start)

; Erlang related definitions
;(setq load-path (cons "/opt/local/lib/erlang/lib/tools-2.6.4/emacs" load-path))
;(setq load-path
;      (cons (expand-file-name "~/bin/emacs/erlware-mode-0.1.15/")
;	    load-path))
;(setq load-path
;      (cons (expand-file-name "~/bin/emacs/")
;	    load-path))
;(setq erlang-root-dir "/opt/local/lib/erlang")
;(setq exec-path (cons "/opt/local/lib/erlang/bin" exec-path))
;(require 'erlang-start)


;Haskell related definitions. It's old.
;(load "~/bin/emacs/haskell-mode/haskell-mode")
;(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)


(setq load-path (cons (expand-file-name "~/Library/Haskell/ghc-7.6.3/lib/ghc-mod-3.1.3/share/")
		      load-path))


(autoload 'ghc-init "ghc" nil t)
;(add-hook 'haskell-mode-hook (lambda () (ghc-init)))
;; Or
;(add-hook 'haskell-mode-hook (lambda () (ghc-init) (flymake-mode)))
;(add-hook 'haskell-mode-hook (lambda () (ghc-init)))

(add-hook 'inferior-haskell-mode-hook
      (lambda ()
        (setq compilation-first-column 1)
        (setq compilation-error-regexp-alist
          (cons `("^\\(.+?\\):\\([0-9]+\\):\\(\\([0-9]+\\):\\)?\\( \\|\n *\\)\\(Warning\\)?"
              1 2 4 ,@(if (fboundp 'compilation-fake-loc)
                      '((6) nil)))
            (cdr (cdr inferior-haskell-error-regexp-alist))))))


(setq load-path (cons (expand-file-name "~/bin/emacs/mmm-mode/") load-path))
;(autoload 'mmm-mode "mmm-mode" nil t)
(load "mmm-mode")

(add-hook 'haskell-mode-hook 'my-mmm-mode)

(defun my-mmm-mode ()
  ;; go into mmm minor mode when class is given
  (make-local-variable 'mmm-global-mode)
  (setq mmm-global-mode 'true))

(setq mmm-submode-decoration-level 0)

(mmm-add-classes
 '((literate-haskell-bird
    :submode text-mode
    :front "^[^>]"
    :include-front true
    :back "^>\\|$"
    )
   (literate-haskell-latex
    :submode literate-haskell-mode
    :front "^\\\\begin{code}"
    :front-offset (end-of-line 1)
    :back "^\\\\end{code}"
    :include-back nil
    :back-offset (beginning-of-line -1)
    )))



;(set-language-environment "Japanese")
(set-buffer-file-coding-system 'utf-8)
;(set-buffer-process-coding-system 'utf-8 'utf-8)

;(require 'clojure-mode)

;(autoload 'groovy-mode "groovy-mode"
;  "Mode for editing groovy source files" t)
;(setq auto-mode-alist
;      (append '(("\\.groovy$" . groovy-mode)) auto-mode-alist))
;(setq interpreter-mode-alist (append '(("groovy" . groovy-mode))
;    				     interpreter-mode-alist))

;(add-hook 'c-mode-common-hook
;	  `(lambda ()
;	     (local-set-key (kbd "C-c C-c") 'compile)))

;whitespace-mode
(autoload 'whitespace-mode "whitespace-mode")

;; ;cedet-1.1
;; (setq load-path (cons (expand-file-name "~/bin/emacs/cedet-1.1/common")
;; 		      load-path))

;; ;malaber-mode
;; (setq load-path (cons (expand-file-name "~/bin/emacs/malabar-1.5-SNAPSHOT/lisp")
;; 		      load-path))

;; (require 'cedet)
;; (semantic-load-enable-minimum-features) ;; or enable more if you wish
;; (require 'malabar-mode)
;; (setq malabar-groovy-lib-dir (expand-file-name "~/bin/emacs/malabar-1.5-SNAPSHOT/lib"))
;; (add-to-list 'auto-mode-alist '("\\.java\\'" . malabar-mode))



(setq load-path (cons (expand-file-name "~/bin/emacs/scala-mode/")
		      load-path))

(require 'scala-mode)
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
(add-hook 'scala-mode-hook
   (function
      (lambda ()
        (setq scala-mode-indent:step 4)
        (scala-mode-lib:define-keys scala-mode-map
                                    ([(shift tab)]   'scala-undent-line)
                                    ([(control tab)] nil))
        (local-set-key [(return)] 'newline-and-indent))))
;(add-hook 'scala-mode-hook 'jaspace-mode)

; Coq-mode by ProofGeneral
;(setq auto-mode-alist (cons '("\\.v$" . coq-mode) auto-mode-alist))
;(autoload 'coq-mode "coq" "Major mode for editing Coq vernacular." t)
(load-file (expand-file-name  "~/bin/emacs/ProofGeneral/generic/proof-site.el"))


(load-file (expand-file-name "~/bin/emacs/alloy-mode.el"))

(if window-system
    (progn
      ;; フォントèå
      ;; (prin1 (font-family-list)) でfont-familyのåååè
      (set-face-attribute 'default nil
			    :family "Menlo"
			      :height 180)
      (set-fontset-font nil 'japanese-jisx0208
			(font-spec
			  :family "gothic"))
      (setq initial-frame-alist
	    (append (list
		     '(width . 125)
		     '(height . 37))
		    initial-frame-alist))
      (setq default-frame-alist initial-frame-alist)))

